{"version":3,"sources":["utils/WinningMatrix.js","utils/CalculateWinner.js","components/Cell/index.jsx","components/Board/index.jsx","components/ResultModal/index.jsx","components/Game/index.jsx","App.js","index.js"],"names":["winningMatrix","0","1","2","3","4","5","6","7","8","calculateWinner","cellValues","netEmptyCellsLeft","index","winningRanges","i","length","currentValue","firstOption","secondOption","hasResult","winner","winningCombination","undefined","Cell","value","canHignlight","onClick","cellClasses","classNames","cell","cellContentClasses","populated","className","Board","cellClicked","cells","map","canHighlight","indexOf","id","ResultModal","isGameOver","startNewGameclicked","handleModal","message","Game","useState","setCellValues","xIsNext","setXIsNext","setIsGameOver","emptyCellsLeft","setEmptyCellsLeft","setWinner","setWinningCombination","isCellEmpty","newCellValues","calcResult","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d95d4c0f.chunk.js","sourcesContent":["const winningMatrix = {\r\n  0: [[1, 2],[3, 6],[4, 8]],\r\n  1: [[0, 2],[4, 7]],\r\n  2: [[0, 1],[5, 8],[4, 6]],\r\n  3: [[0, 6],[4, 5]],\r\n  4: [[2, 6],[3, 5],[1, 7],[0, 8]],\r\n  5: [[3, 4],[2, 8]],\r\n  6: [[7, 8],[0, 3],[2, 4]],\r\n  7: [[6, 8],[1, 4]],\r\n  8: [[6, 7],[2, 5],[0, 4]],\r\n};\r\n\r\nexport default winningMatrix;\r\n","import winningMatrix from './WinningMatrix';\r\n\r\nconst calculateWinner = (cellValues, netEmptyCellsLeft, index) => {\r\n  const winningRanges = winningMatrix[index];\r\n\r\n  for (let i = 0; i < winningRanges.length; i++) {\r\n    const currentValue = cellValues[index];\r\n    const firstOption = cellValues[winningRanges[i][0]];\r\n    const secondOption = cellValues[winningRanges[i][1]];\r\n\r\n    if (currentValue === firstOption && currentValue === secondOption) {\r\n      return {\r\n        hasResult: true,\r\n        winner: currentValue,\r\n        winningCombination: [index, winningRanges[i][0], winningRanges[i][1]],\r\n      };\r\n    }\r\n  }\r\n\r\n  if (netEmptyCellsLeft === 0) {\r\n    return {\r\n      hasResult: true,\r\n      winner: undefined,\r\n      winningCombination: [],\r\n    };\r\n  }\r\n\r\n  return {\r\n    hasResult: false,\r\n    winner: undefined,\r\n    winningCombination: [],\r\n  };\r\n};\r\n\r\nexport default calculateWinner;\r\n","import './cell.css';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nconst Cell = ({ value, canHignlight, onClick }) => {\r\n  const cellClasses = classNames({\r\n    cell: true,\r\n    winner: canHignlight,\r\n  });\r\n\r\n  const cellContentClasses = classNames({\r\n    'cell-content': true,\r\n    populated: value,\r\n  });\r\n\r\n  return (\r\n    <button className={cellClasses} onClick={onClick}>\r\n      <span className={cellContentClasses}>{value}</span>\r\n    </button>\r\n  );\r\n};\r\n\r\nCell.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  canHignlight: PropTypes.bool.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Cell;\r\n","import Cell from '../Cell';\r\nimport PropTypes from 'prop-types';\r\nimport './board.css';\r\n\r\nconst Board = ({ cellValues, winningCombination, cellClicked }) => {\r\n  const cells = cellValues.map((value, index) => {\r\n    const canHighlight =\r\n      winningCombination && winningCombination.indexOf(index) >= 0;\r\n\r\n    return (\r\n      <Cell\r\n        value={value}\r\n        canHignlight={canHighlight}\r\n        key={index}\r\n        onClick={() => cellClicked(index)}\r\n      />\r\n    );\r\n  });\r\n\r\n  return <div id=\"board\">{cells}</div>;\r\n};\r\n\r\nBoard.propTypes = {\r\n  cellValues: PropTypes.array.isRequired,\r\n  winningCombination: PropTypes.array.isRequired,\r\n  cellClicked: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Board;\r\n","import './resultmodal.css';\r\nimport classNames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ResultModal = ({ isGameOver, winner, startNewGameclicked }) => {\r\n  const handleModal = classNames({\r\n    'open-modal': isGameOver,\r\n  });\r\n\r\n  const message = winner ? `Winner is ${winner}` : 'This is a toe';\r\n\r\n  return (\r\n    <div id=\"modal-overlay\" className={handleModal}>\r\n      <div id=\"game-result-modal\">\r\n        <div id=\"result-container\">\r\n          <div id=\"winner-container\">\r\n            <span>{message}</span>\r\n          </div>\r\n        </div>\r\n        <div id=\"new-game-container\">\r\n          <button id=\"new-game-button\" onClick={startNewGameclicked}>\r\n            Start New Game\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nResultModal.propTypes = {\r\n  isGameOver: PropTypes.bool.isRequired,\r\n  winner: PropTypes.oneOf([undefined, 'X', 'O']),\r\n  startNewGameclicked: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ResultModal;\r\n","import { useState } from 'react';\r\nimport calculateWinner from '../../utils/CalculateWinner';\r\nimport Board from '../Board';\r\nimport ResultModal from '../ResultModal';\r\nimport './game.css';\r\n\r\nconst Game = () => {\r\n  const [cellValues, setCellValues] = useState([\r\n    '',\r\n    '',\r\n    '',\r\n    '',\r\n    '',\r\n    '',\r\n    '',\r\n    '',\r\n    '',\r\n  ]);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [emptyCellsLeft, setEmptyCellsLeft] = useState(9);\r\n  const [winner, setWinner] = useState();\r\n  const [winningCombination, setWinningCombination] = useState([]);\r\n\r\n  const onNewGame = () => {\r\n    setCellValues(['', '', '', '', '', '', '', '', '']);\r\n    setXIsNext(true);\r\n    setIsGameOver(false);\r\n    setEmptyCellsLeft(9);\r\n    setWinner(undefined);\r\n    setWinningCombination([]);\r\n  };\r\n\r\n  const isCellEmpty = index => cellValues[index] === '';\r\n\r\n  const onCellClicked = index => {\r\n    if (isCellEmpty(index)) {\r\n      const newCellValues = [...cellValues];\r\n      newCellValues[index] = xIsNext ? 'X' : 'O';\r\n\r\n      const netEmptyCellsLeft = emptyCellsLeft - 1;\r\n\r\n      const calcResult = calculateWinner(\r\n        newCellValues,\r\n        netEmptyCellsLeft,\r\n        index,\r\n      );\r\n\r\n      setCellValues(newCellValues);\r\n      setXIsNext(!xIsNext);\r\n      setIsGameOver(calcResult.hasResult);\r\n      setEmptyCellsLeft(netEmptyCellsLeft);\r\n      setWinner(calcResult.winner);\r\n      setWinningCombination(calcResult.winningCombination);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div id=\"game\">\r\n        <h1>Tic Tac Toe</h1>\r\n        <Board\r\n          cellClicked={onCellClicked}\r\n          cellValues={cellValues}\r\n          winningCombination={winningCombination}\r\n        />\r\n      </div>\r\n      <ResultModal\r\n        isGameOver={isGameOver}\r\n        winner={winner}\r\n        startNewGameclicked={onNewGame}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import Game from './components/Game';\n\nfunction App() {\n  return (\n    <>\n      <Game />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}